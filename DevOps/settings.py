"""
Django settings for DevOps project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os, sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 设置app和扩展包路径
sys.path.insert(0, os.path.join(BASE_DIR, 'all_app'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '7@$g@$8@u9!^o)3msd%i!8jt!vmekoru$n$kfxw*39b5(5v6&@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# 自定义的APP
APPS = [
    'core',
    'common',
    'user',
]
# Application definition
INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',  # rest api
    'rest_framework.authtoken',  # rest 认证token
    'corsheaders',  # 跨域
    'django_filters',  # django的过滤器
    'rest_framework_swagger',  # 接口文档
] + APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # 跨域中间件
]

ROOT_URLCONF = 'DevOps.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'DevOps.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
DATABASES_CHOICE = {
    "localhost": {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'devops',
        'USER': 'root',
        'PASSWORD': 'qwe123!@#',
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"
        }
    }
}
DATABASES = {
    'default': DATABASES_CHOICE["localhost"]
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# REST_FRAMEWORK 相关设置
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
        'utils.permission_classes.ModelPermission'  # 自定义模型权限
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter'),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
}

# 自定义用户验证
AUTHENTICATION_BACKENDS = [
    # 'user.backends.CustomBackend',
    'django.contrib.auth.backends.ModelBackend'
]

# 设置项是否开启URL访问地址后面不为/跳转至带有/的路径
APPEND_SLASH = True
# 自定义用户模型
AUTH_USER_MODEL = 'user.User'

# 跨域设置
CORS_ORIGIN_ALLOW_ALL = True  # 全部接受，白名单将会无效。
CORS_ALLOW_CREDENTIALS = True  # 允许跨域验证

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'collectstatic')
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

# 媒体文件
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# 缓存设置
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',  # 给缓存放置的内存区设置一个名字
        'TIMEOUT': 60 * 60 * 24,
    }
}

# session config
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
# SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 24 * 60 * 60  # 会话cookie过期时间（秒）
# SESSION_COOKIE_HTTPONLY = False  # 会话是否使用httponly，如果为true，js将无法获取会话cookie
SESSION_TIME_OUT = 48 * 60 * 60

# 一些自定义设置
TIME_FORMAT = "%Y-%m-%d %H:%M:%S"  # 格式化时间格式化
ACTION_DICT = {'add': '增加', 'delete': '删除', 'change': '修改', 'read': '查询'}  # 模型权限转换
LOCK_TIME = 5    # 锁定时间限制(单位是分钟)
LOGIN_FAILED_TIMES_LIMIT = 5    # 密码错误限制次数
VERIFY_IMG_PATH = os.path.join(MEDIA_ROOT, 'tempfiles', 'verify.jpg')  # 验证码生成路径
VERIFY_IMG_URL = '/media/tempfiles/verify.jpg'  # 验证码生成url

# log config
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(MEDIA_ROOT, 'logs', 'debug.log'),
        },
        'running': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(MEDIA_ROOT, 'logs', 'info.log'),
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True
        },
        'info': {
            'handlers': ["running"],
            'level': 'INFO',
            'propagate': True
        }
    }
}
