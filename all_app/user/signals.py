# -*- coding: utf-8 -*-
from __future__ import unicode_literals

__author__ = 'Mundy'
"""
@action: 同步数据库时，初始化部分数据
@time: 2018/1/15 10:00
"""

import threading
from django.contrib.auth.models import User, Group
from django.contrib.auth.hashers import make_password
from user.models import *
from django.apps import apps as global_apps
from django.contrib.auth import get_permission_codename
from django.db import DEFAULT_DB_ALIAS, router
from django.conf import settings


def init():
    """
    初始化数据
    :return:
    """
    if User.objects.filter(username='admin').exists():
        return
    # 权限组
    admin_group = Group.objects.create(name='系统管理员')  # 主要控制接口权限

    # 角色
    admin_role = Role.objects.create(name='系统管理员')  # 主要控制菜单

    # 用户
    admin = User.objects.create(username='admin', password=make_password('123456'), is_superuser=1, is_admin=1)

    admin.groups.add(admin_group)
    admin.role = admin_role
    admin.save()


def thread_init(sender, **kwargs):
    """
    第一个参数必须是sender，且必须有kwargs参数

    :param sender:
    :param kwargs:
    :return:
    """
    # 在另一个线程中执行init方法，主要是为了解决数据库事务提交延迟的问题。
    t = threading.Timer(1, init)
    t.start()


def _get_all_permissions(opts):
    """
    Returns (codename, name) for all permissions in the given opts.
    """
    builtin = _get_builtin_permissions(opts)
    custom = list(opts.permissions)
    return builtin + custom


def _get_builtin_permissions(opts):
    """
    Returns (codename, name) for all autogenerated permissions.
    By default, this is ('add', 'change', 'delete')
    """
    perms = []
    action_dict = settings.ACTION_DICT
    for action in opts.default_permissions:
        perms.append((
            get_permission_codename(action, opts),
            '%s %s' % (action_dict[action] if action in action_dict else 'Can %s' % action, opts.verbose_name_raw)
        ))
    return perms


def create_permissions(app_config, verbosity=2, interactive=True, using=DEFAULT_DB_ALIAS, apps=global_apps, **kwargs):
    """
    自定义创建权限数据
    """
    if not app_config.models_module:
        return

    app_label = app_config.label
    try:
        app_config = apps.get_app_config(app_label)
        ContentType = apps.get_model('contenttypes', 'ContentType')
        Permission = apps.get_model('auth', 'Permission')
    except LookupError:
        return

    if not router.allow_migrate_model(using, Permission):
        return

    # 删除django auth创建的权限数据
    Permission.objects.all().delete()

    # 全部的app模型
    app_label_list = map(lambda item: item[0], set(ContentType.objects.all().values_list('app_label')))

    # This will hold the permissions we're looking for as
    # (content_type, (codename, name))
    searched_perms = list()
    # The codenames and ctypes that should exist.
    ctypes = set()
    for app_label in app_label_list:
        app_config = apps.get_app_config(app_label)
        for klass in app_config.get_models():
            # Force looking up the content types in the current database
            # before creating foreign keys to them.
            ctype = ContentType.objects.db_manager(using).get_for_model(klass)

            ctypes.add(ctype)
            for perm in _get_all_permissions(klass._meta):
                searched_perms.append((ctype, perm))

    # Find all the Permissions that have a content_type for a model we're
    # looking for.  We don't need to check for codenames since we already have
    # a list of the ones we're going to create.
    all_perms = set(Permission.objects.using(using).filter(
        content_type__in=ctypes,
    ).values_list(
        "content_type", "codename"
    ))

    perms = [
        Permission(codename=codename, name=name, content_type=ct)
        for ct, (codename, name) in searched_perms
        if (ct.pk, codename) not in all_perms
    ]
    Permission.objects.using(using).bulk_create(perms)
    if verbosity >= 2:
        for perm in perms:
            print("Adding permission '%s'" % perm)


def modified_permission(sender, **kwargs):
    """修正权限表"""
    action_dict = settings.ACTION_DICT

    ContentType = global_apps.get_model('contenttypes', 'ContentType')
    Permission = global_apps.get_model('auth', 'Permission')
    Group = global_apps.get_model('auth', 'Group')

    translate_dict = {'group': '组', 'permission': '权限'}

    buildin_model = [
        (Permission, ContentType.objects.db_manager(DEFAULT_DB_ALIAS).get_for_model(Permission)),
        (Group, ContentType.objects.db_manager(DEFAULT_DB_ALIAS).get_for_model(Group))
    ]

    # 已经创建了就不需要进行下去
    if Permission.objects.filter(name="%s %s" % (action_dict['read'], translate_dict['group'] if 'group' in translate_dict else 'group'),
                                      content_type=ContentType.objects.db_manager(DEFAULT_DB_ALIAS).get_for_model(Group),
                                      codename=get_permission_codename('read', Group._meta)).exists():
        return

    # 增加权限
    for model, content_type_model in buildin_model:
        Permission.objects.filter(content_type=content_type_model).delete()
        model_name = content_type_model.model
        try:
            Permission.objects.create(name="%s %s" % (action_dict['read'], translate_dict[model_name] if model_name in translate_dict else model_name),
                                      content_type=content_type_model,
                                      codename=get_permission_codename('read', model._meta))
            Permission.objects.create(name="%s %s" % (action_dict['add'], translate_dict[model_name] if model_name in translate_dict else model_name),
                                      content_type=content_type_model,
                                      codename=get_permission_codename('add', model._meta))
            Permission.objects.create(name="%s %s" % (action_dict['delete'], translate_dict[model_name] if model_name in translate_dict else model_name),
                                      content_type=content_type_model,
                                      codename=get_permission_codename('delete', model._meta))
            Permission.objects.create(name="%s %s" % (action_dict['change'], translate_dict[model_name] if model_name in translate_dict else model_name),
                                      content_type=content_type_model,
                                      codename=get_permission_codename('change', model._meta))
        except:
            pass
